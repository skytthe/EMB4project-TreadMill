// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarkerMessage.proto

#ifndef PROTOBUF_MarkerMessage_2eproto__INCLUDED
#define PROTOBUF_MarkerMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace treadmill {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MarkerMessage_2eproto();
void protobuf_AssignDesc_MarkerMessage_2eproto();
void protobuf_ShutdownFile_MarkerMessage_2eproto();

class MarkerMessage;

// ===================================================================

class MarkerMessage : public ::google::protobuf::Message {
 public:
  MarkerMessage();
  virtual ~MarkerMessage();

  MarkerMessage(const MarkerMessage& from);

  inline MarkerMessage& operator=(const MarkerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarkerMessage& default_instance();

  void Swap(MarkerMessage* other);

  // implements Message ----------------------------------------------

  MarkerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarkerMessage& from);
  void MergeFrom(const MarkerMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string camera_id = 1;
  inline bool has_camera_id() const;
  inline void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  inline const ::std::string& camera_id() const;
  inline void set_camera_id(const ::std::string& value);
  inline void set_camera_id(const char* value);
  inline void set_camera_id(const char* value, size_t size);
  inline ::std::string* mutable_camera_id();
  inline ::std::string* release_camera_id();
  inline void set_allocated_camera_id(::std::string* camera_id);

  // required bool markerFound = 2;
  inline bool has_markerfound() const;
  inline void clear_markerfound();
  static const int kMarkerFoundFieldNumber = 2;
  inline bool markerfound() const;
  inline void set_markerfound(bool value);

  // optional int32 x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional sint32 error_x = 5;
  inline bool has_error_x() const;
  inline void clear_error_x();
  static const int kErrorXFieldNumber = 5;
  inline ::google::protobuf::int32 error_x() const;
  inline void set_error_x(::google::protobuf::int32 value);

  // optional sint32 error_y = 6;
  inline bool has_error_y() const;
  inline void clear_error_y();
  static const int kErrorYFieldNumber = 6;
  inline ::google::protobuf::int32 error_y() const;
  inline void set_error_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:treadmill.MarkerMessage)
 private:
  inline void set_has_camera_id();
  inline void clear_has_camera_id();
  inline void set_has_markerfound();
  inline void clear_has_markerfound();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_error_x();
  inline void clear_has_error_x();
  inline void set_has_error_y();
  inline void clear_has_error_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* camera_id_;
  bool markerfound_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 error_x_;
  ::google::protobuf::int32 error_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_MarkerMessage_2eproto();
  friend void protobuf_AssignDesc_MarkerMessage_2eproto();
  friend void protobuf_ShutdownFile_MarkerMessage_2eproto();

  void InitAsDefaultInstance();
  static MarkerMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// MarkerMessage

// optional string camera_id = 1;
inline bool MarkerMessage::has_camera_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarkerMessage::set_has_camera_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarkerMessage::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarkerMessage::clear_camera_id() {
  if (camera_id_ != &::google::protobuf::internal::kEmptyString) {
    camera_id_->clear();
  }
  clear_has_camera_id();
}
inline const ::std::string& MarkerMessage::camera_id() const {
  return *camera_id_;
}
inline void MarkerMessage::set_camera_id(const ::std::string& value) {
  set_has_camera_id();
  if (camera_id_ == &::google::protobuf::internal::kEmptyString) {
    camera_id_ = new ::std::string;
  }
  camera_id_->assign(value);
}
inline void MarkerMessage::set_camera_id(const char* value) {
  set_has_camera_id();
  if (camera_id_ == &::google::protobuf::internal::kEmptyString) {
    camera_id_ = new ::std::string;
  }
  camera_id_->assign(value);
}
inline void MarkerMessage::set_camera_id(const char* value, size_t size) {
  set_has_camera_id();
  if (camera_id_ == &::google::protobuf::internal::kEmptyString) {
    camera_id_ = new ::std::string;
  }
  camera_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarkerMessage::mutable_camera_id() {
  set_has_camera_id();
  if (camera_id_ == &::google::protobuf::internal::kEmptyString) {
    camera_id_ = new ::std::string;
  }
  return camera_id_;
}
inline ::std::string* MarkerMessage::release_camera_id() {
  clear_has_camera_id();
  if (camera_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = camera_id_;
    camera_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarkerMessage::set_allocated_camera_id(::std::string* camera_id) {
  if (camera_id_ != &::google::protobuf::internal::kEmptyString) {
    delete camera_id_;
  }
  if (camera_id) {
    set_has_camera_id();
    camera_id_ = camera_id;
  } else {
    clear_has_camera_id();
    camera_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool markerFound = 2;
inline bool MarkerMessage::has_markerfound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarkerMessage::set_has_markerfound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarkerMessage::clear_has_markerfound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarkerMessage::clear_markerfound() {
  markerfound_ = false;
  clear_has_markerfound();
}
inline bool MarkerMessage::markerfound() const {
  return markerfound_;
}
inline void MarkerMessage::set_markerfound(bool value) {
  set_has_markerfound();
  markerfound_ = value;
}

// optional int32 x = 3;
inline bool MarkerMessage::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarkerMessage::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarkerMessage::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarkerMessage::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 MarkerMessage::x() const {
  return x_;
}
inline void MarkerMessage::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 4;
inline bool MarkerMessage::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarkerMessage::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarkerMessage::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarkerMessage::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 MarkerMessage::y() const {
  return y_;
}
inline void MarkerMessage::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional sint32 error_x = 5;
inline bool MarkerMessage::has_error_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarkerMessage::set_has_error_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarkerMessage::clear_has_error_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarkerMessage::clear_error_x() {
  error_x_ = 0;
  clear_has_error_x();
}
inline ::google::protobuf::int32 MarkerMessage::error_x() const {
  return error_x_;
}
inline void MarkerMessage::set_error_x(::google::protobuf::int32 value) {
  set_has_error_x();
  error_x_ = value;
}

// optional sint32 error_y = 6;
inline bool MarkerMessage::has_error_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarkerMessage::set_has_error_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarkerMessage::clear_has_error_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarkerMessage::clear_error_y() {
  error_y_ = 0;
  clear_has_error_y();
}
inline ::google::protobuf::int32 MarkerMessage::error_y() const {
  return error_y_;
}
inline void MarkerMessage::set_error_y(::google::protobuf::int32 value) {
  set_has_error_y();
  error_y_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace treadmill

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MarkerMessage_2eproto__INCLUDED
